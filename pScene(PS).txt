#version 300 es

#ifdef GL_ES
precision highp float; // If GLSL ES is detected, add required precision setting.
#endif // GL_ES

//Helper functions
//x^2
float sq(float x) {
	return x * x;
}

//x^2^2^2^2^2
float sq_5(float x) {
	return sq(sq(sq(sq(sq(x)))));
}

layout (location = 0) out vec4 rtFragColor;

in vec4 vNormal;

in vec4 vLightPoint;
in float vIntensity;
in vec4 vPosition;
in vec4 vCamera;

//-------------------------------------------------------------------------------------
//LIGHT CALCULATIONS
void lightCalc(out float diffuseIntensity, out float specularIntensity, in vec4 light, in float intensity, in vec4 position, in vec4 camera){
	//specularIntensity calculation
	vec4 direction = position - light;

	vec4 halfwayVector = normalize( -direction - camera);

	float specularCoefficient = max(0.0, dot(vNormal, vec4(halfwayVector.xyz, 0.0)));
	
	specularIntensity = sq_5(specularCoefficient); //sq_5 focuses the highlight
	
	//diffuseIntensity calculation
	float dist = length(direction);
	
	vec4 lightNormal = normalize(light - camera);
	
	float diffuseCoefficient = max(0.0, dot(vNormal, lightNormal)); //max stops it from being negative

	float attenuatedIntensity = 1.0 / (1.0 + dist / intensity) + sq(dist) / sq(intensity);
	
	diffuseIntensity = diffuseCoefficient * attenuatedIntensity;
}

void main() {
	//rtFragColor = vNormal;
	rtFragColor = vec4(1.0, 0.0, 0.0, 1.0);
	
	//Light
	float diffuseIntensity, specularIntensity;
	lightCalc(diffuseIntensity, specularIntensity, vLightPoint, vIntensity, vPosition, vCamera);
	
	rtFragColor += (diffuseIntensity * vec4(1.0) + specularIntensity * vec4(1.0));
	rtFragColor *= 0.5;
	//go to objects
	//create RT rtScene
	//change Properties for the program
	//change render target to rtScene
}